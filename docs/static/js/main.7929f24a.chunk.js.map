{"version":3,"sources":["Components/AddCategory.jsx","helpers/getGifs.js","Components/GifGridItem.jsx","Components/GiftGrid.jsx","Hooks/useFetchGifs.js","GifExpertApp.jsx","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GiftGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qMAyCeA,EAtCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEjB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACK,mCACA,sBAAMC,SAbU,SAACC,GACjBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAEzBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOnB,SACU,uBACAO,KAAK,OACLC,MAAST,EACTU,SApBW,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,QAoBbG,YAAY,qB,+BC3BnBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,sDCYLO,EAVK,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACzB,OACI,sBAAKc,UAAU,6CAAf,UAEI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCiBDO,EAnBE,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAClB,ECH0B,SAACA,GAC3B,MAA0Bf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OARAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACpBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGd,CAACpB,IACGqB,EDXwBK,CAAa1B,GAArCoB,EAAP,EAAOA,QAAcP,EAArB,EAAgBN,KAEhB,OACE,qCACE,oBAAIS,UAAU,mCAAd,SAAmDhB,IAElDoB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SACE,6BACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,eEOnBgB,EAnBM,WACnB,MAAoC1C,mBAAS,CAAC,gBAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAIA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG4C,EAAWnB,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAAyBA,SAAUA,GAApBA,YCJb6B,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCCdO,IAASC,OAEP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.7929f24a.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n     \r\n     const [inputValue, setInputValue] = useState('');\r\n     const handleInputChange = (e) => {\r\n          setInputValue(e.target.value);\r\n     }\r\n     const handleSubmit = (e) => {\r\n          e.preventDefault();\r\n\r\n          if(inputValue.trim().length > 2){\r\n\r\n               setCategories(cats => [inputValue, ...cats]);\r\n               setInputValue('');\r\n          }\r\n          // console.log('submit hecho');\r\n     }\r\n     \r\n     return (\r\n          <>\r\n          <form onSubmit={handleSubmit}>\r\n                    <input \r\n                    type=\"text\"\r\n                    value = {inputValue}\r\n                    onChange = {handleInputChange}\r\n                    placeholder='Buscar Gifs'\r\n               />\r\n          </form>\r\n          \r\n               \r\n          </>\r\n     )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n     setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=XT91fZF2r7FkksBbERKFEs8cDjT32dJb`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className='card animate__animated animate__fadeInLeft'>   \r\n            {/* {img.title} */}\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../Hooks/useFetchGifs\";\r\n// import { getGifs } from \"../helpers/GetGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst GiftGrid = ({ category }) => {\r\n  const {loading, data:images} = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__flash\" >{category}</h3>\r\n\r\n      {loading && <p>Loading</p>}\r\n      <div className=\"card-grid\">\r\n        <ol>\r\n          {images.map((img) => (\r\n            <GifGridItem key={img.id} {...img} />\r\n          ))}\r\n        </ol>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GiftGrid;\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n    });\r\n  }, [category]);\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./Components/AddCategory\";\r\nimport GiftGrid from \"./Components/GiftGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"Dragon Ball\"]);\r\n  // const handleAdd = () => {\r\n  //      setCategories(cats => [...categories, 'HunterxHunter']);\r\n  // }\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => (\r\n             <GiftGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport 'animate.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}